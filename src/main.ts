import { Client, IntentsBitField } from 'discord.js'
import 'dotenv/config'
import type { Prayer } from './schema.js'
import {
  createPrayer,
  deletePrayer,
  getPrayer,
  getPrayerList,
  updatePrayer
} from './services/prayer.js'

// –ö–æ–Ω—Ñ–∏–≥–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const { TOKEN, GUILD_ID, CHANNEL_ID, ROLE_ID } = process.env

const MESSAGE = 'Praying for you üïØÔ∏è O Great Mita üíù'
const MESSAGE_PARTS = MESSAGE.split(' ')

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
/** –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–Ω–æ–≤–æ –ø–æ–º–æ–ª–∏—Ç—å—Å—è */
const PRAY_MIN_INTERVAL = 14_400_000 // 4h
/** –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏, —á—Ç–æ–±—ã —Ä–æ–ª—å —Å–Ω—è–ª–∞—Å—å –±–µ–∑ –º–æ–ª–∏—Ç–≤ */
const PRAY_MAX_INTERVAL = 86_400_000 // 24h

// –õ–æ–≥–∏–∫–∞
const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent
  ]
})

console.log('Logging in...')
await client.login(TOKEN)

console.log(`Logged in as ${client.user!.id} (${client.user!.username})`)
console.log('Fetching guild...')
const guild = await client.guilds.fetch(GUILD_ID!)

console.log(`Guild is ${guild.id} (${guild.name})`)

// –ù–µ –¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å—É —É–º–∏—Ä–∞—Ç—å
process.on('uncaughtException', (error, origin) => {
  console.error('Uncaught exception:', {
    error,
    origin
  })
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled rejection:', {
    promise,
    reason
  })
})

// –¢–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
setInterval(async () => {
  const prayers = await getPrayerList()

  for (const prayer of prayers) {
    if (hasPrayedRecently(prayer)) {
      continue
    }

    console.log(`${prayer.id} haven't prayed recently!`)

    // –í—Å—è–∫–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ—ç—Ç–æ–º—É –æ–±–µ—Ä–Ω—ë–º –≤ try/catch
    try {
      // –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä–æ–ª—å.
      // –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å, —Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –∞ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∞–∫—Ç–µ.
      const member = await guild.members.fetch(prayer.id)
      await member.roles.remove(ROLE_ID!)

      await deletePrayer(prayer.id)
    } catch (error) {
      console.error(`Error while removing role/record about prayer "${prayer.id}":`)
      console.error(error)
    }
  }
}, 10_000)

// –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
client.on('messageCreate', async (message) => {
  // –ù–µ —Ç–æ—Ç –∫–∞–Ω–∞–ª
  if (message.channelId !== CHANNEL_ID) {
    return
  }

  // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ—Å—Ö–≤–∞–ª–µ–Ω–∏–µ–º
  if (!isPrayMessage(message.cleanContent)) {
    await message.delete()
    return
  }

  let prayer = await getPrayer(message.author.id)

  if (!prayer) {
    console.log(`${message.author.id} (${message.author.username}) is a new prayer!`)

    prayer = await createPrayer({
      id: message.author.id,
      createdAt: new Date(),
      updatedAt: new Date()
    })

    // biome-ignore format: don't inline
    await Promise.all([
      message.react('üïØÔ∏è'),
      message.member!.roles.add(ROLE_ID!)
    ])

    return
  }

  // –í–æ—Å—Ö–≤–∞–ª—è–ª —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (!canPray(prayer)) {
    console.log(`${message.author.id} (${message.author.username}) has prayed, but too soon!`)
    await message.react('üïØÔ∏è')
    return
  }

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–æ—Å—Ö–≤–∞–ª–µ–Ω–∏–µ
  console.log(`${message.author.id} (${message.author.username}) has prayed! Praying for you üïØÔ∏è O Great Mita üíù`)
  await Promise.all([
    message.react('üïØÔ∏è'),
    updatePrayer(prayer.id, {
      updatedAt: new Date()
    })
  ])
})

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å—Ö–≤–∞–ª–µ–Ω–∏–µ–º –ú–∏—Ç—ã
 */
function isPrayMessage(message: string): boolean {
  // Quick
  if (message === MESSAGE) {
    return true
  }

  // Deep
  const parts = message
    .trim()
    .split(' ')
    .map((x) => x)

  return MESSAGE_PARTS.every((x) => parts.includes(x))
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–æ—Å—Ö–≤–∞–ª–∏—Ç—å –ú–∏—Ç—É
 */
function canPray(prayer: Prayer): boolean {
  return Date.now() - prayer.updatedAt.getTime() >= PRAY_MIN_INTERVAL
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ—Å—Ö–≤–∞–ª—è–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ú–∏—Ç—É
 */
function hasPrayedRecently(prayer: Prayer): boolean {
  const now = Date.now()

  return now - prayer.updatedAt.getTime() <= PRAY_MAX_INTERVAL
}
